This document logs additions / patch notes to the Designa video game.

It is formatted: 
Date || Build || 
	- Notes

7/21/2020 || pa_1.0.0 || 
	- Boilerplate engine design
	- Game loop 
	- Asset / primitive text (no numbers or other special characters) / gfx rendering 
	- Input 
	- Basic entity management system
	- Tile system
	- Added three tiles: Air tile ID 0, Grass tile ID 1, and Dirt tile ID 2
	- State system
	- World loader

7/22/2020 || pa_1.0.1 ||  
	- Basic creature physics
	- World editing (place and delete dirt tiles)
	- Basic HUD system rendering player health
	- Time-based fall damage
	- Camera, with smooth follow
	- Creature hurt flashing
	- Made the Air tile transparent, so ready to render the layer system that needs to be tweaked
	
7/23/2020 || pa_1.0.2 ||  
	- Made render layers abstract
	- SkyLayer will be the default first rendered layer. It renders a fillRect of color col across the entire map
	- SkyLayer now can render the sky at any color according to var (night and day)
	- Made a custom cursor
	- Made Item class
	- Made ItemHandler class, to make it easy to manage in the World
	- Added "Dirt" item ID 0
	- Made block selector graphic
	- Implemented break and place range
	- Made it impossible to place tiles on top of player
	- Implemented tileBreakLevel for all tiles
	- Made breaking tiles require the tile breakLevel to be zero
	- Made the Input class understand justClicked, meaning actions that only should happen once when clicked are now
	    possible
	- Started on trying to render a gfx representation of damage to a tile
	
7/24/2020 || pa_1.0.3 ||
	- Began constructing a primitive lighting system based off the idea of a 6-shade light map.
	- Worked on the light blending algorithm. Looks nice, but still needs some tweaking.
	- Created a Vector2 class to help with lighting calculations
	
7/25/2020 || pa_1.0.4 ||
	- Advanced the lighting system by creating the LightManager class
	- Created a efficient light baking algorithm based on where lights are placed
	- Now player is able to add lights to or remove lights from the world
	- The tiles now correctly render their break level

7/26/2020 || pa_1.0.5 ||
	- Added the UndergroundLayer to render the dirt in the background when under ground level
	- Fixed the white line rendering issue
	
7/27/2020 || pa_1.0.6 ||
	- Made the player face the direction they are breaking or building blocks in
	- Began designing an inventory system.
	- Made the Inventory base class abstract because this game with have two different inventories, one on the
	    player and one as the crate.
	- Made the PlayerInventory class to render the four slots and items within them.

7/29/ 2020 || pa_1.0.7 ||
    - Began the process of migrating entire project to implement libgdx so I can take advantage of Gradle.

7/30/2020 || pa_1.0.8 ||
    - Built an efficient input handler system so as to be general for core code but be written differently for
        each platform.
    - Continued to set up the project, changing a few minor things.
    - Created a new camera zoom system.
    - Rebuilt up to the point where world and entities are rendered correctly and user can control player.

7/31/2020 || pa_1.0.9 ||
    - Changed camera zoom controls
    - Cleaned up various code
    - Rebuilt up to the point where the building system is active and player looks at whatever side is being
        edited. Also, tile strengths are rendered.
    - Rebuilding lighting system. Initial lights look fine, huge problems when go to placing lights. Some math
        needs to be done to correct the OpenGL inverted y cord system.

8/1/2020 || pa_1.0.10 ||
    - Fixed light rendering.
    - Began creating a day and night cycle with the AmbientCycle class.
    - Made a primitive ambient light system to change the light exposure to the top most tile in a formation.
        TODO marked in LightManager function buildAmbientLight because it still needs some work when you go farther into the
        ground
    - Light now bakes at appropriate times

8/2/2020 || pa_1.0.11 ||
    - Light intensity now reduces based on the average height of the top tile. <--- UPDATE: That was my first approach and
        it doesn't really work like I want it to so I will be changing that later on.
    - Worlds can now procedurally generate using fine-tuned Perlin noise with whatever sample size is passed in.
    - The world generator will create a randomly generated world and save it as a tilemap file to be opened or observed later.
    - Fixed average highest tile method replaced with the highest tile for each x.
    - Fixed the zoom to now zoom in and out instantly.
    - Background dirt now renders underneath all terrain blocks broken.
    - Cleaned up some code.

8/5/2020 || pa_1.0.12 ||
    - Added numbers and symbols to text rendering.
    - Fixed camera bounds calculations
    - Made rendering very efficient. 60 TPS even with huge maps.
        NOTE: Dimensions of 10000 x 100 are 1.90mb files. Not too big.
        World files seem to progress in size linearly. 10000 x 100 is 1.90mb while 20000 x 100 is 3.80mb and so on...
        The one caveat of a large map is obviously loading time. I need to consider making a loading screen.
    - Fixed weird light blocking when building over the ground. TODO: This might need to be changed later on...
    - Player now spawns in the center of the map. Still trying to make it the right y. TODO: Make the map files have a spawn second line.
    - Added StaticEntity class which is abstract for any static entity. I'm thinking they will be "models" that are two
        dimensional arrays of certain tiles that, together, make up an entire static entity that can give you resources
        on it's death. This makes it mesh better with the aesthetic of the game.
    - Fixed some more lighting bugs, increased high air tile threshold to 25. TODO: My method may need to be changed...

8/6/2020 || pa_1.0.13 ||
    - Added Oak Wood tile ID 3
    - Added Item class
    - Added ItemHandler class
    - Added the dirtItem code 0 that grass tiles and dirt tiles will drop
    - Updated the algorithm for finding the highest tile.
        The lighting system now works pretty much as intended.
    - The player now spawn directly in the middle of every map on the right y tile
    - Item drops are now affected by gravity
    - Player now gets lost in darkness
    - Camera now spawns in the correct place

8/7/2020 || pa_1.0.14 ||
    - Added the inventory, accessed with "f" by default
    - Items stack in the inventory, looking for the next slot and if it can't find one, the item won't be picked up.
    - User can now select a inventory slot with the cursor to focus on
    - Building now can't happen when inventory is open
    - There is now a tool slot on the HUD that will let the player use whatever is selected in the inventory

8/8/2020 || pa_1.0.15 ||
    - ToolSlot now renders item and number of item of whatever slot is selected
    - Cleaned up building manager
    - Input handler now handles place and destroy requests
    - Now can only place a block if the item in the tool slot is classified a placeable block
    - Can't place blocks when you run out in inventory
    - Tool slot items now render in player's hand
    - Camera can now zoom in and out a little more

8/9/2020 || pa_1.0.16 ||
    - Stone tile added ID 5
    - Stone item added ID 1
    - Stone now spawns as a part of the terrain generation
    - Now the correct item spawns when any tile is broken and vise versa when an item is used
    - TPS now is rendered in the title
    - Added Simple Drill to mine stone and dirt faster. Player gets this by default when they enter world?
    - Fixed lighting strength bug
    - Tweaked how drills render in inventory, tool slot, and player's hand.

8/12/2020 || pa_1.0.17 ||
    - Fixed item spawning X movement toward player

    - Began creating crafting system, called "Blueprints"
    - Blueprints are now broken up into three different sub categories,
        Tools, weapons, and machines
    - Each sub category has its own list of what items it can craft represented in
        bubbles to be clicked on.
    - Every creatable item will now have a recipe, which the item representation understands and will
        render what is needed to create the selected item.
    - Created a way to give all creatable items a recipe of any amount of items that exist in the game
    - Now selected item representations will tell you the recipe of itself

8/13/2020 || pa_1.0.18 ||
    - Added trees, three different textures for now
    - Created entity collision system
    - StaticEntities render before Creatures but before BottomDirt
    - World now generates random trees
    - Trees now drop wood as they fall
    - Added torches
    - Cleaned up building manager
    - Now item blueprints can be created if you have the resources in your inventory. (Still needs a little tweaking, but
    basic idea is there)

8/14/2020 || pa_1.0.19 ||
    - Fixed the crafting to now take tabs of all needed ingredients and use them accordingly
    - Added sound effects to most integral actions
    - Added "Back Tile" building option
    - Created a prolonged action timer for repeatedly doing a repetitive task automatically at a cool down time limit
        (Like breaking a block or chopping a tree down)
    - Items in inventory can now be picked up and moved around to any slot the player wants, still working on adding like items.
    - Introduced NCPs with simple decision-making capabilities.
    - Every NPC has a random name, a random speed, and a random decision time
    - Fixed some NPC tile-trap bugs, still not all fixed though

8/15/2020 || pa_1.0.20 ||
    - NPCs now are animated
    - Updated the look, and position, of the GUI
    - Game now is forced to run fullscreen at 1920 x 1080 resolution
    - Fixed inventory stacking issue
    - Fixed wrong item creation issue
    - Fixed inventory add item splitting issue
    - Fixed inventory bounds issue

8/16/2020 || pa_1.0.20 p2 ||
    - Added gun wielding animations and graphics to player sprite
    - Created ItemType Weapon and Gun to create LaserGun class that can shoot and reload
    - Restructured ItemType class to encapsulate static ItemTypes of inherited type

8/18/2020 || pa_1.0.21 ||
    - Gradle build runs with no problems, Designa can run as a standalone .jar file now.
    - Added Resource Tree GUI to show the interactive trees for each resource base
    - There are now siz resource bases that all items will be crafted from
    - Nodes will now render dim when they aren't available
    - To make something in the blueprint section, you must first create all required resources in the resource
        tree
    - You can use the blueprints to create actual in-game items that can be used. The resources can't be placed
        or used on their own in the game world, only the base ones that are found can be picked up
    - Created a Resource item type
    - Updated todo list



