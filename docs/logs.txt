This document logs additions / patch notes to the Designa video game.

It is formatted: 
Date || Build || 
	- Notes

7/21/2020 || pa_1.0.0 || 
	- Boilerplate engine design
	- Game loop 
	- Asset / primitive text (no numbers or other special characters) / gfx rendering 
	- Input 
	- Basic entity management system
	- Tile system
	- Added three tiles: Air tile ID 0, Grass tile ID 1, and Dirt tile ID 2
	- State system
	- World loader

7/22/2020 || pa_1.0.1 ||  
	- Basic creature physics
	- World editing (place and delete dirt tiles)
	- Basic HUD system rendering player health
	- Time-based fall damage
	- Camera, with smooth follow
	- Creature hurt flashing
	- Made the Air tile transparent, so ready to render the layer system that needs to be tweaked
	
7/23/2020 || pa_1.0.2 ||  
	- Made render layers abstract
	- SkyLayer will be the default first rendered layer. It renders a fillRect of color col across the entire map
	- SkyLayer now can render the sky at any color according to var (night and day)
	- Made a custom cursor
	- Made Item class
	- Made ItemHandler class, to make it easy to manage in the World
	- Added "Dirt" item ID 0
	- Made block selector graphic
	- Implemented break and place range
	- Made it impossible to place tiles on top of player
	- Implemented tileBreakLevel for all tiles
	- Made breaking tiles require the tile breakLevel to be zero
	- Made the Input class understand justClicked, meaning actions that only should happen once when clicked are now
	    possible
	- Started on trying to render a gfx representation of damage to a tile
	
7/24/2020 || pa_1.0.3 ||
	- Began constructing a primitive lighting system based off the idea of a 6-shade light map.
	- Worked on the light blending algorithm. Looks nice, but still needs some tweaking.
	- Created a Vector2 class to help with lighting calculations
	
7/25/2020 || pa_1.0.4 ||
	- Advanced the lighting system by creating the LightManager class
	- Created a efficient light baking algorithm based on where lights are placed
	- Now player is able to add lights to or remove lights from the world
	- The tiles now correctly render their break level

7/26/2020 || pa_1.0.5 ||
	- Added the UndergroundLayer to render the dirt in the background when under ground level
	- Fixed the white line rendering issue
	
7/27/2020 || pa_1.0.6 ||
	- Made the player face the direction they are breaking or building blocks in
	- Began designing an inventory system.
	- Made the Inventory base class abstract because this game with have two different inventories, one on the
	    player and one as the crate.
	- Made the PlayerInventory class to render the four slots and items within them.

7/29/ 2020 || pa_1.0.7 ||
    - Began the process of migrating entire project to implement libgdx so I can take advantage of Gradle.

7/30/2020 || pa_1.0.8 ||
    - Built an efficient input handler system so as to be general for core code but be written differently for
        each platform.
    - Continued to set up the project, changing a few minor things.
    - Created a new camera zoom system.
    - Rebuilt up to the point where world and entities are rendered correctly and user can control player.

7/31/2020 || pa_1.0.9 ||
    - Changed camera zoom controls
    - Cleaned up various code
    - Rebuilt up to the point where the building system is active and player looks at whatever side is being
        edited. Also, tile strengths are rendered.
    - Rebuilding lighting system. Initial lights look fine, huge problems when go to placing lights. Some math
        needs to be done to correct the OpenGL inverted y cord system.

8/1/2020 || pa_1.0.10 ||
    - Fixed light rendering.
    - Began creating a day and night cycle with the AmbientCycle class.
    - Made a primitive ambient light system to change the light exposure to the top most tile in a formation.
        TODO marked in LightManager function buildAmbientLight because it still needs some work when you go farther into the
        ground
    - Light now bakes at appropriate times

8/2/2020 || pa_1.0.11 ||
    - Light intensity now reduces based on the average height of the top tile. <--- UPDATE: That was my first approach and
        it doesn't really work like I want it to so I will be changing that later on.
    - Worlds can now procedurally generate using fine-tuned Perlin noise with whatever sample size is passed in.
    - The world generator will create a randomly generated world and save it as a tilemap file to be opened or observed later.
    - Fixed average highest tile method replaced with the highest tile for each x.
    - Fixed the zoom to now zoom in and out instantly.
    - Background dirt now renders underneath all terrain blocks broken.
    - Cleaned up some code.

8/5/2020 || pa_1.0.12 ||
    - Added numbers and symbols to text rendering.
    - Fixed camera bounds calculations
    - Made rendering very efficient. 60 TPS even with huge maps.
        NOTE: Dimensions of 10000 x 100 are 1.90mb files. Not too big.
        World files seem to progress in size linearly. 10000 x 100 is 1.90mb while 20000 x 100 is 3.80mb and so on...
        The one caveat of a large map is obviously loading time. I need to consider making a loading screen.
    - Fixed weird light blocking when building over the ground. TODO: This might need to be changed later on...
    - Player now spawns in the center of the map. Still trying to make it the right y. TODO: Make the map files have a spawn second line.
    - Added StaticEntity class which is abstract for any static entity. I'm thinking they will be "models" that are two
        dimensional arrays of certain tiles that, together, make up an entire static entity that can give you resources
        on it's death. This makes it mesh better with the aesthetic of the game.
    - Fixed some more lighting bugs, increased high air tile threshold to 25. TODO: My method may need to be changed...

8/6/2020 || pa_1.0.13 ||
    - Added Oak Wood tile ID 3
    - Added Item class
    - Added ItemHandler class
    - Added the dirtItem code 0 that grass tiles and dirt tiles will drop
    - Updated the algorithm for finding the highest tile.
        The lighting system now works pretty much as intended.
    - The player now spawn directly in the middle of every map on the right y tile
    - Item drops are now affected by gravity
    - Player now gets lost in darkness
    - Camera now spawns in the correct place

8/7/2020 || pa_1.0.14 ||
    - Added the inventory, accessed with "f" by default
    - Items stack in the inventory, looking for the next slot and if it can't find one, the item won't be picked up.
    - User can now select a inventory slot with the cursor to focus on
    - Building now can't happen when inventory is open
    - There is now a tool slot on the HUD that will let the player use whatever is selected in the inventory

8/8/2020 || pa_1.0.15 ||
    - ToolSlot now renders item and number of item of whatever slot is selected
    - Cleaned up building manager
    - Input handler now handles place and destroy requests
    - Now can only place a block if the item in the tool slot is classified a placeable block
    - Can't place blocks when you run out in inventory
    - Tool slot items now render in player's hand
    - Camera can now zoom in and out a little more

8/9/2020 || pa_1.0.16 ||
    - Stone tile added ID 5
    - Stone item added ID 1
    - Stone now spawns as a part of the terrain generation
    - Now the correct item spawns when any tile is broken and vise versa when an item is used
    - TPS now is rendered in the title
    - Added Simple Drill to mine stone and dirt faster. Player gets this by default when they enter world?
    - Fixed lighting strength bug
    - Tweaked how drills render in inventory, tool slot, and player's hand.

8/12/2020 || pa_1.0.17 ||
    - Fixed item spawning X movement toward player

    - Began creating crafting system, called "Blueprints"
    - Blueprints are now broken up into three different sub categories,
        Tools, weapons, and machines
    - Each sub category has its own list of what items it can craft represented in
        bubbles to be clicked on.
    - Every creatable item will now have a recipe, which the item representation understands and will
        render what is needed to create the selected item.
    - Created a way to give all creatable items a recipe of any amount of items that exist in the game
    - Now selected item representations will tell you the recipe of itself

8/13/2020 || pa_1.0.18 ||
    - Added trees, three different textures for now
    - Created entity collision system
    - StaticEntities render before Creatures but before BottomDirt
    - World now generates random trees
    - Trees now drop wood as they fall
    - Added torches
    - Cleaned up building manager
    - Now item blueprints can be created if you have the resources in your inventory. (Still needs a little tweaking, but
    basic idea is there)

8/14/2020 || pa_1.0.19 ||
    - Fixed the crafting to now take tabs of all needed ingredients and use them accordingly
    - Added sound effects to most integral actions
    - Added "Back Tile" building option
    - Created a prolonged action timer for repeatedly doing a repetitive task automatically at a cool down time limit
        (Like breaking a block or chopping a tree down)
    - Items in inventory can now be picked up and moved around to any slot the player wants, still working on adding like items.
    - Introduced NCPs with simple decision-making capabilities.
    - Every NPC has a random name, a random speed, and a random decision time
    - Fixed some NPC tile-trap bugs, still not all fixed though

8/15/2020 || pa_1.0.20 ||
    - NPCs now are animated
    - Updated the look, and position, of the GUI
    - Game now is forced to run fullscreen at 1920 x 1080 resolution
    - Fixed inventory stacking issue
    - Fixed wrong item creation issue
    - Fixed inventory add item splitting issue
    - Fixed inventory bounds issue

8/16/2020 || pa_1.0.20 p2 ||
    - Added gun wielding animations and graphics to player sprite
    - Created ItemType Weapon and Gun to create LaserGun class that can shoot and reload
    - Restructured ItemType class to encapsulate static ItemTypes of inherited type

8/18/2020 || pa_1.0.21 ||
    - Gradle build runs with no problems, Designa can run as a standalone .jar file now.
    - Added Resource Tree GUI to show the interactive trees for each resource base
    - There are now siz resource bases that all items will be crafted from
    - Nodes will now render dim when they aren't available
    - To make something in the blueprint section, you must first create all required resources in the resource
        tree
    - You can use the blueprints to create actual in-game items that can be used. The resources can't be placed
        or used on their own in the game world, only the base ones that are found can be picked up
    - Created a Resource item type
    - Updated todo list
    - Began defining some resource items into the game
    - All wood and stone items all have items to match and item recipes that build off each other by 2^2
        NOTE: As of p2, the game won't run because I still need to finish defining all resource items into the game.

8/19/2020 || pa_1.0.22 ||
    - Defined the rest of the resources in the game
        NOTE: That sucked.

8/20/2020 || pa_1.0.23 ||
    - Reorganized static object instantiation into Assets class. Now all object instances used in the game are
        loaded in the Assets class statically to be used.
    - Created a way to see the recipe of a resource on the resource tree
    - Trees now drop bark
    - Stone now drops rocks
    - You can now create resources with other resources and add them into the inventory to make blueprint items with
        TODO: Fix it. It's close, but right now it's not creating the node selected, instead it's just traveling up
        TODO: the tree automatically.

8/22/2020 || pa_1.0.24 ||
    - Fixed the cursor freezing when a mouse button is clicked
    - Fixed resource crafting the wrong node
    - Fixed resource crafting taking too many of a resource
    - Patched a bug that broke blocks out of range

8/23/2020 || pa_1.0.25 ||
    - Copper, silver and iron ores are now spawning underground with a certain probability
    - Fixed numerous inventory bugs like stacking, placement, and creating resources and items
    - Made items in the blueprint section gray if you can't make them
    - Started putting construction tiles into the game. You can now place plywood -> reinforced strongwood tiles.
    - You can now craft the wood construction tiles with a blueprint
    - You can now hold your mouse on the create button to automatically create items
    - You can now hold the right mouse button while you create things to create 10 at a time (if possible)

8/24/2020 || pa_1.0.26 ||
    - Added clouds
    - Blueprints now list the names of the resources needed
    - Began adding the first enemy to the game: GroundBot

8/25/2020 || pa_1.0.27 ||
    - Made good progress on TerraBot AI.
        Still needs little work, they get stuck sometimes during complex block structures.

8/26/2020 || pa_1.0.28 ||
    - TerraBots can now build up or destroy down in order to get to the player
    - TerraBots are now unlikely to get stuck in their pursuit
    - TerraBots now make sound when falling, destroying, or building
    - Fixed incorrect layer rendering when zooming the camera

8/28/2020 || pa_1.0.29 ||
    - You can now craft 10 item blueprints at a time if you have the resources.
    - Fixed the crafting bug where you get one more than you have
    - Had an idea where you cna click at the top of the blueprint or resource tree and have them go to the bottom of the
        screen. Like a tab.

8/29/2020 || pa_1.0.30 ||
    - Added crates!
    - You can now transfer items from the inventory to a crate.
    - You can now transfer items from the crate to the inventory.
    - You can now separate items in the crate or inventory
    - Crate added to construction blueprint section

8/30/2020 || pa_1.0.31 ||
    - Copper Mechanical Drills are now in the game!
    - Began working on machines
    - Stone pipes are partially added. Need to make it work.
    - When a pipe is selected, you can now use 'R' to change the direction it will be placed.
    NOTE: Lots of code and new algs today, so some are subject to change.

8/31/2020 || pa_1.0.32 ||
    - Pipe rendering fixed with the pipe map
    - Pipe animations now discern what direction pipes are headed
    - All machine logic is now encapsulated in the MachineType class
    - Added the Offloader
    - TODO: BAD BUG found when breaking crate. Didn't get the right amount of items back and placing another crate in that
        TODO: same position, there was a strange graphical behavior showing what used to be in the slots transparently
    - Added the Wrench to the game, but TODO: it needs functionality and to be flipped when player aholds it.
    - The world now generates another backTile environment to give the World more dimension

9/2/2020 || pa_1.0.33 ||
    - Fixed the crate graphical error when placed in same place as previous crate
    - TODO: The crate doesn't give you back stacks of the same object, so I need a way to keep track of that
    - TODO: Also, this problem with the splitting of items in the inventory of the same type seems to happen when
        TODO: Picking up an item. It can't seem to do two things at once.

9/4/2020 || pa_1.0.34 || DEBUGGING! YAY
    - Wrench now renders correctly in players hand
    - Crates now give back the correct amount of items when broken
    - Player can no longer jump and place a block when there is no space to
    - Back dirt tiles now also render for the back environment
    - You can't now just place a torch in mid-air, it needs to be either on a back tile or
        needs a supporting front tile underneath.
    - When you break a front tile that supports a torch, the torch will break as well
    - Back tiles now primitively reflect lighting

9/5/2020 || pa_1.0.35 ||
    - Created a main menu state
    - Created world selector state
    - Reorganized worlds into sub files with information about the game to be saved / loaded on players whim (See file-structure.txt)
        TODO: Finish tree file, inventory file, and crates.
        TODO: Make a way to save and load the world
    - Made an in game pause menu

9/7/2020 || pa_1.0.36 ||
    - Made the player inventory smaller
    - Items now spawn into the outside world when clicked outside of a slot
    - Began adding Ladders into the game TODO: Finish logic for moving up them

9/8/2020 || pa_1.0.37 ||
    - The game can now save and load worlds
        This includes front tiles, back tiles, all break levels, the pipe map, creation of light where
        torches are and saving of the inventory and spawn point!
    - Broken tiles now spawn an item in the middle so they don't get stuck
    - Changed the font for the main menu buttons
    - Added directional text for world selector state

9/9/2020 || pa_1.0.38 ||
    - Made UI more object oriented
    - TextButtons now exist and can be put in any State
    - InputFields now exist and can be put in any State
    - Added the WorldCreatorState, which is a form where the player fills in information about the new world being created
    - The player can now successfully create a world and spawn in the game state.

9/11/2020 || pa_1.0.39 ||
    - Created the world loader option and list the existing worlds
    - Player can now load into worlds they have previously created and saved
    - Player can now save worlds and return to the main menu.
        Note: At this point, the game is fully "functional". Still needs to be refined and added to.
    - Created JavaDocs and commented for Assets class and half of BuildingManager class.
    - Trees now save and load
    - When tiles are crafted, they now make 4 each.
    - Crates save, they just don't load right.

9/12/2020 || pa_1.0.40 ||
    - Crates now save and load correctly
    - The pause menu no longer pops up after you close a crate
    - Did a little more documentation in BuildingManager.

9/14/2020 || pa_1.0.41 ||
    - Cleaned up the functionality of the BuildingManager.
    - Instances of mechanical drills are now stored in a list when placed complete with
        location, the resource it's drilling, and it the resource it's made out of.
    - Finished the documentation of the BuildingManager.
    - Finished the documentation of the NpcBuildingManager.
    - Finished the documentation of the Npc class.
    - Began documentation on the Player class.

9/16/2020 || pa_1.0.41 (cont) ||
    - Finished the documentation of the Player class.
    - Finished the documentation of the TerraBot class.
    - Finished the documentation of the Creature class.
    - Finished the documentation of the Enemy class.
    - Finished the documentation of the StaticEntity class.
    - Finished the documentation of the Tree class.
    - Finished the documentation of the Entity class.
    - Finished the documentation of the EntityHandler class.
        NOTE: That concludes the current entities package.
    - Finished the documentation of the Animation class.

9/17/2020 || pa_1.0.42 ||
    - Removed offloaders and replaced them with Nodes
        Nodes are pipes that change the direction of the pipe system to the complementary angle.
    - Removed the pipe map algorithm and replaced it with individual pipe instances.
    - Pipes now check what the next tile is in their sequence (based off of their orientation)
    - Pipes can now carry items offloaded by a copper drill in any direction.
    - Pipes can now offload items they transport to other pipes of the same direction.
    - Pipes can now offload items they transport into a chest if it is their destination.

9/20/2020 || pa_1.0.43 ||
    - Changed the node texture
    - Worked on node functionality.
        Complete redesign.
    - Nodes now distribute to pipes correctly by calculating
        inputs and outputs appropriately.
        TODO There seems to be an issue with node resource splitting. Check that.
            Note: Resolved.

9/21/2020 || pa_1.0.44 ||
    - Nodes now properly distribute items.
        TODO Create a cap for items that can be stored in there
            NOTE: Resolved.
    - Drills now dictate what item the pipe gets and what speed it is mined.
    - All machines now save and load (pipe, drill, and node)
    - Pipes are now not solid to make it easier to walk through.
    - TODO Major bug: NullPointerException when moving drilled items in crates to inventory.
        NOTE: Resolved.
    - Crates can now give output when pipes are placed by them in the correct orientation.
    - Nodes can now offload to crates if they are placed next to them.
    - Ladders are now useful XD (You can go up and down)

        damn, I did a lot today.

9/24/2020 || pa_1.0.45 ||
    - Fixed node distributing where they can't put infinite objects into a pipe.
    - Nodes can now only have one item stored inside.
    - Nodes can now offload to one another. This makes for much more complex / efficient routes to be made.
    - Added the Assembler Tile.
        TODO Work in the MachineType class to allow it to have function
            NOTE: Resolved.
    - The assembler can now save and load
    - The assembler can now hold a specific item recipe when right clicked
    - The assembler can now output a completed item if it holds all the resources to make an item.
    - The assembler can now throw out unused resources
        TODO Make it so the assembler can offload to itself, crates, and nodes.
    - Drills now can mine any tile they are placed on
    - Drills now can mine trees for tree bark
    - Trees now don't spawn on top of drills when loading the world back in
        TODO Make it so drills can't mine any more bark after the tree is cut down
	    TODO Drills can be placed on crates and that's not good.
	    TODO The assembler needs to save the amount of items in it when the game is quit and saved

9/25/2020 || pa_1.0.46 || GUI Overhaul
    - Inventory now renders in the bottom middle of the screen
    - Inventory now has background
    - The TechnologyRegion will be a one stop shop for all things tech. It now renders the background
    - The TechnologyRegion SubRegions will house the implementation of the menu
    - The TechTypeSelector is now placed
    - All the TechTypes are listed and can be selected

9/26/2020 || pa_1.0.46 || GUI Overhaul (cont)
    - Crate GUI now renders correctly
    - Pause menu now renders correctly
    - There is now an ItemRepresentationGrid that lists the items in that itemType
    - There is now a scroll wheel in the ItemRepresentationGrid
    - You can now select individual item cells to look at.
    - Each ItemType now has a corresponding itemRep list.
    - All itemRep lists now render and tick only when they selected.
    - Items now require a description.
    - Item cells, when selected, will now show the name and the item description in the space below the grid.
    - Assemblers can now make resources

9/28/2020 || pa_1.0.46 ||
    - Added shading to resource item sprites
    - Updated the wood tier defense tiles

9/29/2020 || pa_1.0.46 ||
    - Fixed the top-of-ladder colliding into blocks issue
    - Fixed the timeInAir on ladder issue
    - Implemented a particle manager to give the game the power to render particles.

10/2/2020 || pa_1.0.47 ||
    - The inventory now is located at the top, the technology at the bottom
        Same with crates, they now render on the bottom
    - You can now use the scroll wheel to select an item from the inventory whether in or out.
    - You can no longer break blocks when using a crate.

10/5/2020 || pa_1.0.47 ||
    - Added the BlasterBase item to the game.
    - Move all Tile instances from the Tile class to the Assets class.
    - The Simple Blaster has been added to the game.

10/6/2020 || pa_1.0.48 ||
    - Blasters now emit a sights laser at muzzle to show their trajectory.
    - Blasters can now be moved to be at angle angle and flipped
        to the left or right when it has the mouse over it.
    - Copper pellets have been added to the game
    - Blasters can now be clicked on with ammo to be loaded with the ammo.
    - Blasters now show their ammo amount
    - Geometry now isn't draw when the pause menu or inventory is active.
    - Any class can now make a geometry render request in the tick or render methods to be drawn on screen.
